{"ast":null,"code":"import _asyncToGenerator from \"D:/2DS/Peddro/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, HostListener, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction SwalPortalComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');\nconst fireOnInitToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');\nconst dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\nclass SweetAlert2LoaderService {\n  // Using any because Angular metadata generator does not understand a pure TS type here\n  constructor(swalProvider) {\n    this.swalProvider = swalProvider;\n  }\n  get swal() {\n    if (!this.swalPromiseCache) {\n      this.preloadSweetAlertLibrary();\n    }\n    return this.swalPromiseCache;\n  }\n  preloadSweetAlertLibrary() {\n    if (this.swalPromiseCache) return;\n    const libPromise = isLoader(this.swalProvider) ? this.swalProvider() : Promise.resolve(this.swalProvider);\n    this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n    function isLoader(value) {\n      return typeof value === 'function' && value.version === undefined;\n    }\n    function isDefaultExport(value) {\n      return typeof value === 'function';\n    }\n  }\n}\nSweetAlert2LoaderService.ɵfac = function SweetAlert2LoaderService_Factory(t) {\n  return new (t || SweetAlert2LoaderService)(i0.ɵɵinject(swalProviderToken));\n};\nSweetAlert2LoaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SweetAlert2LoaderService,\n  factory: SweetAlert2LoaderService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SweetAlert2LoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [swalProviderToken]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`\n *     and `didDestroy`.\n *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,\n *     there can't be multiple listeners on them, and we need the values they can/must return.\n */\nclass SwalComponent {\n  constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {\n    this.sweetAlert2Loader = sweetAlert2Loader;\n    this.moduleLevelFireOnInit = moduleLevelFireOnInit;\n    this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n    this.willOpen = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n    this.didOpen = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is\n     * repainted on the screen).\n     * Typically, this will happen after `Swal.fire()` or `Swal.update()`.\n     * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over\n     * {@link willOpen}.\n     */\n    this.didRender = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup\n     * being fired).\n     */\n    this.willClose = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to\n     * another popup being fired).\n     */\n    this.didClose = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another\n     * popup.\n     * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer\n     * {@link didDestroy} over {@link didClose}.\n     */\n    this.didDestroy = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    this.confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n    this.deny = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link close} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    this.dismiss = new EventEmitter();\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n    this.touchedProps = new Set();\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n    this.markTouched = this.touchedProps.add.bind(this.touchedProps);\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n    this.isCurrentlyShown = false;\n  }\n  /**\n   * An object of SweetAlert2 native options, useful if:\n   *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n   *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n   *\n   * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n   *     previous properties you want to erase again.\n   *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n   *\n   * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n   */\n  set swalOptions(options) {\n    //=> Update properties\n    Object.assign(this, options);\n    //=> Mark changed properties as touched\n    const touchedKeys = Object.keys(options);\n    touchedKeys.forEach(this.markTouched);\n  }\n  /**\n   * Computes the options object that will get passed to SweetAlert2.\n   * Only the properties that have been set at least once on this component will be returned.\n   * Mostly for internal usage.\n   */\n  get swalOptions() {\n    //=> We will compute the options object based on the option keys that are known to have changed.\n    //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n    //   avoiding side effects.\n    return [...this.touchedProps].reduce((obj, key) => ({\n      ...obj,\n      [key]: this[key]\n    }), {});\n  }\n  set swalVisible(visible) {\n    visible ? this.fire() : this.close();\n  }\n  get swalVisible() {\n    return this.isCurrentlyShown;\n  }\n  /**\n   * Angular lifecycle hook.\n   * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n   * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n   * causing no delay.\n   */\n  ngOnInit() {\n    //=> Preload SweetAlert2 library in case this component is activated.\n    this.sweetAlert2Loader.preloadSweetAlertLibrary();\n  }\n  /**\n   * Angular lifecycle hook.\n   * Fires the modal, if the component or module is configured to do so.\n   */\n  ngAfterViewInit() {\n    const fireOnInit = this.swalFireOnInit === undefined ? this.moduleLevelFireOnInit : this.swalFireOnInit;\n    fireOnInit && this.fire();\n  }\n  /**\n   * Angular lifecycle hook.\n   * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n   */\n  ngOnChanges(changes) {\n    //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n    //   send it with the next fire() or update() calls.\n    Object.keys(changes)\n    //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n    .filter(key => !key.startsWith('swal')).forEach(this.markTouched);\n    //=> Eventually trigger re-render if the modal is open.\n    void this.update();\n  }\n  /**\n   * Angular lifecycle hook.\n   * Closes the SweetAlert when the component is destroyed.\n   */\n  ngOnDestroy() {\n    //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n    const dismissOnDestroy = this.swalDismissOnDestroy === undefined ? this.moduleLevelDismissOnDestroy : this.swalDismissOnDestroy;\n    dismissOnDestroy && this.close();\n  }\n  /**\n   * Shows the SweetAlert.\n   *\n   * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n   * Otherwise, (confirm)=\"myHandler($event)\" and (dismiss)=\"myHandler($event)\" can be used in templates.\n   */\n  fire() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const swal = yield _this.sweetAlert2Loader.swal;\n      const userOptions = _this.swalOptions;\n      //=> Build the SweetAlert2 options\n      const options = {\n        //=> Merge with calculated options set for that specific swal\n        ...userOptions,\n        //=> Handle modal lifecycle events\n        willOpen: composeHook(userOptions.willOpen, modalElement => {\n          _this.willOpen.emit({\n            modalElement\n          });\n        }),\n        didOpen: composeHook(userOptions.didOpen, modalElement => {\n          _this.isCurrentlyShown = true;\n          _this.didOpen.emit({\n            modalElement\n          });\n        }),\n        didRender: composeHook(userOptions.didRender, modalElement => {\n          _this.didRender.emit({\n            modalElement\n          });\n        }),\n        willClose: composeHook(userOptions.willClose, modalElement => {\n          _this.isCurrentlyShown = false;\n          _this.willClose.emit({\n            modalElement\n          });\n        }),\n        didClose: composeHook(userOptions.didClose, () => {\n          _this.didClose.emit();\n        }),\n        didDestroy: composeHook(userOptions.didDestroy, () => {\n          _this.didDestroy.emit();\n        })\n      };\n      //=> Show the Swal! And wait for confirmation or dimissal.\n      const result = yield swal.fire(options);\n      //=> Emit on (confirm), (deny) or (dismiss)\n      switch (true) {\n        case result.isConfirmed:\n          _this.confirm.emit(result.value);\n          break;\n        case result.isDenied:\n          _this.deny.emit();\n          break;\n        case result.isDismissed:\n          _this.dismiss.emit(result.dismiss);\n          break;\n      }\n      return result;\n      function composeHook(userHook, libHook) {\n        return (...args) => (libHook(...args), userHook?.(...args));\n      }\n    })();\n  }\n  /**\n   * Closes the modal, if opened.\n   *\n   * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).\n   *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.\n   *               {@see Swal.close}.\n   */\n  close(result) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.isCurrentlyShown) return;\n      const swal = yield _this2.sweetAlert2Loader.swal;\n      swal.close(result);\n    })();\n  }\n  /**\n   * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n   * If the modal is not opened, the component options will simply be updated and that's it.\n   *\n   * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n   *\n   * @param options\n   */\n  update(options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (options) {\n        _this3.swalOptions = options;\n      }\n      if (!_this3.isCurrentlyShown) return;\n      const swal = yield _this3.sweetAlert2Loader.swal;\n      const allOptions = _this3.swalOptions;\n      const updatableOptions = Object.keys(allOptions).filter(swal.isUpdatableParameter).reduce((obj, key) => ({\n        ...obj,\n        [key]: allOptions[key]\n      }), {});\n      swal.update(updatableOptions);\n    })();\n  }\n}\nSwalComponent.ɵfac = function SwalComponent_Factory(t) {\n  return new (t || SwalComponent)(i0.ɵɵdirectiveInject(SweetAlert2LoaderService), i0.ɵɵdirectiveInject(fireOnInitToken), i0.ɵɵdirectiveInject(dismissOnDestroyToken));\n};\nSwalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SwalComponent,\n  selectors: [[\"swal\"]],\n  inputs: {\n    title: \"title\",\n    titleText: \"titleText\",\n    text: \"text\",\n    html: \"html\",\n    footer: \"footer\",\n    icon: \"icon\",\n    iconColor: \"iconColor\",\n    iconHtml: \"iconHtml\",\n    backdrop: \"backdrop\",\n    toast: \"toast\",\n    target: \"target\",\n    input: \"input\",\n    width: \"width\",\n    padding: \"padding\",\n    background: \"background\",\n    position: \"position\",\n    grow: \"grow\",\n    showClass: \"showClass\",\n    hideClass: \"hideClass\",\n    customClass: \"customClass\",\n    timer: \"timer\",\n    timerProgressBar: \"timerProgressBar\",\n    heightAuto: \"heightAuto\",\n    allowOutsideClick: \"allowOutsideClick\",\n    allowEscapeKey: \"allowEscapeKey\",\n    allowEnterKey: \"allowEnterKey\",\n    stopKeydownPropagation: \"stopKeydownPropagation\",\n    keydownListenerCapture: \"keydownListenerCapture\",\n    showConfirmButton: \"showConfirmButton\",\n    showDenyButton: \"showDenyButton\",\n    showCancelButton: \"showCancelButton\",\n    confirmButtonText: \"confirmButtonText\",\n    denyButtonText: \"denyButtonText\",\n    cancelButtonText: \"cancelButtonText\",\n    confirmButtonColor: \"confirmButtonColor\",\n    denyButtonColor: \"denyButtonColor\",\n    cancelButtonColor: \"cancelButtonColor\",\n    confirmButtonAriaLabel: \"confirmButtonAriaLabel\",\n    denyButtonAriaLabel: \"denyButtonAriaLabel\",\n    cancelButtonAriaLabel: \"cancelButtonAriaLabel\",\n    buttonsStyling: \"buttonsStyling\",\n    reverseButtons: \"reverseButtons\",\n    focusConfirm: \"focusConfirm\",\n    focusDeny: \"focusDeny\",\n    focusCancel: \"focusCancel\",\n    showCloseButton: \"showCloseButton\",\n    closeButtonHtml: \"closeButtonHtml\",\n    closeButtonAriaLabel: \"closeButtonAriaLabel\",\n    loaderHtml: \"loaderHtml\",\n    showLoaderOnConfirm: \"showLoaderOnConfirm\",\n    preConfirm: \"preConfirm\",\n    preDeny: \"preDeny\",\n    imageUrl: \"imageUrl\",\n    imageWidth: \"imageWidth\",\n    imageHeight: \"imageHeight\",\n    imageAlt: \"imageAlt\",\n    inputLabel: \"inputLabel\",\n    inputPlaceholder: \"inputPlaceholder\",\n    inputValue: \"inputValue\",\n    inputOptions: \"inputOptions\",\n    inputAutoTrim: \"inputAutoTrim\",\n    inputAttributes: \"inputAttributes\",\n    inputValidator: \"inputValidator\",\n    returnInputValueOnDeny: \"returnInputValueOnDeny\",\n    validationMessage: \"validationMessage\",\n    progressSteps: \"progressSteps\",\n    currentProgressStep: \"currentProgressStep\",\n    progressStepsDistance: \"progressStepsDistance\",\n    scrollbarPadding: \"scrollbarPadding\",\n    swalOptions: \"swalOptions\",\n    swalFireOnInit: \"swalFireOnInit\",\n    swalDismissOnDestroy: \"swalDismissOnDestroy\",\n    swalVisible: \"swalVisible\"\n  },\n  outputs: {\n    willOpen: \"willOpen\",\n    didOpen: \"didOpen\",\n    didRender: \"didRender\",\n    willClose: \"willClose\",\n    didClose: \"didClose\",\n    didDestroy: \"didDestroy\",\n    confirm: \"confirm\",\n    deny: \"deny\",\n    dismiss: \"dismiss\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function SwalComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'swal',\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: SweetAlert2LoaderService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [fireOnInitToken]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [dismissOnDestroyToken]\n      }]\n    }];\n  }, {\n    title: [{\n      type: Input\n    }],\n    titleText: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    html: [{\n      type: Input\n    }],\n    footer: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    iconColor: [{\n      type: Input\n    }],\n    iconHtml: [{\n      type: Input\n    }],\n    backdrop: [{\n      type: Input\n    }],\n    toast: [{\n      type: Input\n    }],\n    target: [{\n      type: Input\n    }],\n    input: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    padding: [{\n      type: Input\n    }],\n    background: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    grow: [{\n      type: Input\n    }],\n    showClass: [{\n      type: Input\n    }],\n    hideClass: [{\n      type: Input\n    }],\n    customClass: [{\n      type: Input\n    }],\n    timer: [{\n      type: Input\n    }],\n    timerProgressBar: [{\n      type: Input\n    }],\n    heightAuto: [{\n      type: Input\n    }],\n    allowOutsideClick: [{\n      type: Input\n    }],\n    allowEscapeKey: [{\n      type: Input\n    }],\n    allowEnterKey: [{\n      type: Input\n    }],\n    stopKeydownPropagation: [{\n      type: Input\n    }],\n    keydownListenerCapture: [{\n      type: Input\n    }],\n    showConfirmButton: [{\n      type: Input\n    }],\n    showDenyButton: [{\n      type: Input\n    }],\n    showCancelButton: [{\n      type: Input\n    }],\n    confirmButtonText: [{\n      type: Input\n    }],\n    denyButtonText: [{\n      type: Input\n    }],\n    cancelButtonText: [{\n      type: Input\n    }],\n    confirmButtonColor: [{\n      type: Input\n    }],\n    denyButtonColor: [{\n      type: Input\n    }],\n    cancelButtonColor: [{\n      type: Input\n    }],\n    confirmButtonAriaLabel: [{\n      type: Input\n    }],\n    denyButtonAriaLabel: [{\n      type: Input\n    }],\n    cancelButtonAriaLabel: [{\n      type: Input\n    }],\n    buttonsStyling: [{\n      type: Input\n    }],\n    reverseButtons: [{\n      type: Input\n    }],\n    focusConfirm: [{\n      type: Input\n    }],\n    focusDeny: [{\n      type: Input\n    }],\n    focusCancel: [{\n      type: Input\n    }],\n    showCloseButton: [{\n      type: Input\n    }],\n    closeButtonHtml: [{\n      type: Input\n    }],\n    closeButtonAriaLabel: [{\n      type: Input\n    }],\n    loaderHtml: [{\n      type: Input\n    }],\n    showLoaderOnConfirm: [{\n      type: Input\n    }],\n    preConfirm: [{\n      type: Input\n    }],\n    preDeny: [{\n      type: Input\n    }],\n    imageUrl: [{\n      type: Input\n    }],\n    imageWidth: [{\n      type: Input\n    }],\n    imageHeight: [{\n      type: Input\n    }],\n    imageAlt: [{\n      type: Input\n    }],\n    inputLabel: [{\n      type: Input\n    }],\n    inputPlaceholder: [{\n      type: Input\n    }],\n    inputValue: [{\n      type: Input\n    }],\n    inputOptions: [{\n      type: Input\n    }],\n    inputAutoTrim: [{\n      type: Input\n    }],\n    inputAttributes: [{\n      type: Input\n    }],\n    inputValidator: [{\n      type: Input\n    }],\n    returnInputValueOnDeny: [{\n      type: Input\n    }],\n    validationMessage: [{\n      type: Input\n    }],\n    progressSteps: [{\n      type: Input\n    }],\n    currentProgressStep: [{\n      type: Input\n    }],\n    progressStepsDistance: [{\n      type: Input\n    }],\n    scrollbarPadding: [{\n      type: Input\n    }],\n    swalOptions: [{\n      type: Input\n    }],\n    swalFireOnInit: [{\n      type: Input\n    }],\n    swalDismissOnDestroy: [{\n      type: Input\n    }],\n    swalVisible: [{\n      type: Input\n    }],\n    willOpen: [{\n      type: Output\n    }],\n    didOpen: [{\n      type: Output\n    }],\n    didRender: [{\n      type: Output\n    }],\n    willClose: [{\n      type: Output\n    }],\n    didClose: [{\n      type: Output\n    }],\n    didDestroy: [{\n      type: Output\n    }],\n    confirm: [{\n      type: Output\n    }],\n    deny: [{\n      type: Output\n    }],\n    dismiss: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\nclass SwalDirective {\n  constructor(viewContainerRef, resolver) {\n    this.viewContainerRef = viewContainerRef;\n    this.resolver = resolver;\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    this.confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n    this.deny = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link dismiss} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    this.dismiss = new EventEmitter();\n  }\n  /**\n   * SweetAlert2 options or a SwalComponent instance.\n   * See the class doc block for more informations.\n   */\n  set swal(options) {\n    if (options instanceof SwalComponent) {\n      this.swalInstance = options;\n    } else if (isArrayOptions(options)) {\n      this.swalOptions = {};\n      [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n    } else {\n      this.swalOptions = options;\n    }\n    function isArrayOptions(value) {\n      return Array.isArray(options);\n    }\n  }\n  /**\n   * OnInit lifecycle handler.\n   * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),\n   * (deny) and (dismiss) outputs to reemit on the directive.\n   */\n  ngOnInit() {\n    if (!this.swalInstance) {\n      const factory = this.resolver.resolveComponentFactory(SwalComponent);\n      this.swalRef = this.viewContainerRef.createComponent(factory);\n      this.swalInstance = this.swalRef.instance;\n    }\n  }\n  /**\n   * OnDestroy lifecycle handler.\n   * Destroys the dynamically-created SwalComponent.\n   */\n  ngOnDestroy() {\n    if (this.swalRef) {\n      this.swalRef.destroy();\n    }\n  }\n  /**\n   * Click handler.\n   * The directive listens for onclick events on its host element.\n   * When this happens, it shows the <swal> attached to this directive.\n   */\n  onClick(event) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n    if (!this.swalInstance) return;\n    if (this.swalOptions) {\n      this.swalInstance.swalOptions = this.swalOptions;\n    }\n    const swalClosed = new Subject();\n    this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n    this.swalInstance.deny.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.deny.emit(v));\n    this.swalInstance.dismiss.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.dismiss.emit(v));\n    this.swalInstance.fire().then(() => swalClosed.next());\n  }\n}\nSwalDirective.ɵfac = function SwalDirective_Factory(t) {\n  return new (t || SwalDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver));\n};\nSwalDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: SwalDirective,\n  selectors: [[\"\", \"swal\", \"\"]],\n  hostBindings: function SwalDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function SwalDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  inputs: {\n    swal: \"swal\"\n  },\n  outputs: {\n    confirm: \"confirm\",\n    deny: \"deny\",\n    dismiss: \"dismiss\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swal]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }];\n  }, {\n    swal: [{\n      type: Input\n    }],\n    confirm: [{\n      type: Output\n    }],\n    deny: [{\n      type: Output\n    }],\n    dismiss: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\nclass SwalPortalComponent {\n  constructor() {\n    this.template = null;\n  }\n}\nSwalPortalComponent.ɵfac = function SwalPortalComponent_Factory(t) {\n  return new (t || SwalPortalComponent)();\n};\nSwalPortalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SwalPortalComponent,\n  selectors: [[\"swal-portal\"]],\n  inputs: {\n    template: \"template\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngTemplateOutlet\"]],\n  template: function SwalPortalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SwalPortalComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template);\n    }\n  },\n  dependencies: [i1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalPortalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'swal-portal',\n      template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    template: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nclass SwalPortalTargets {\n  constructor() {\n    /**\n     * Targets the modal close button block contents.\n     */\n    this.closeButton = {\n      element: swal => swal.getCloseButton(),\n      options: {\n        showCloseButton: true\n      }\n    };\n    /**\n     * Targets the modal title block contents.\n     */\n    this.title = {\n      element: swal => swal.getTitle(),\n      // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n      options: {\n        title: ' '\n      }\n    };\n    /**\n     * Targets the modal text block contents (that is another block inside the first content block, so you can still\n     * use other modal features like Swal inputs, that are situated inside that parent content block).\n     */\n    this.content = {\n      element: swal => swal.getHtmlContainer(),\n      // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n      options: {\n        text: ' '\n      }\n    };\n    /**\n     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n     * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n     *     performance of everyone, for a relatively rare use case.\n     */\n    this.actions = {\n      element: swal => swal.getActions(),\n      // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n      options: {\n        showConfirmButton: true\n      }\n    };\n    /**\n     * Targets the confirm button contents, replacing the text inside it (not the button itself)\n     */\n    this.confirmButton = {\n      element: swal => swal.getConfirmButton(),\n      options: {\n        showConfirmButton: true\n      }\n    };\n    /**\n     * Targets the deny button contents, replacing the text inside it (not the button itself)\n     */\n    this.denyButton = {\n      element: swal => swal.getDenyButton(),\n      options: {\n        showDenyButton: true\n      }\n    };\n    /**\n     * Targets the cancel button contents, replacing the text inside it (not the button itself)\n     */\n    this.cancelButton = {\n      element: swal => swal.getCancelButton(),\n      options: {\n        showCancelButton: true\n      }\n    };\n    /**\n     * Targets the modal footer contents.\n     */\n    this.footer = {\n      element: swal => swal.getFooter(),\n      // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n      options: {\n        footer: ' '\n      }\n    };\n  }\n}\nSwalPortalTargets.ɵfac = function SwalPortalTargets_Factory(t) {\n  return new (t || SwalPortalTargets)();\n};\nSwalPortalTargets.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SwalPortalTargets,\n  factory: SwalPortalTargets.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalPortalTargets, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\nclass SwalPortalDirective {\n  constructor(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.app = app;\n    this.templateRef = templateRef;\n    this.sweetAlert2Loader = sweetAlert2Loader;\n    this.swalTargets = swalTargets;\n    this.swalComponent = swalComponent;\n    this.destroyed = new Subject();\n  }\n  /**\n   * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n   * that will receive the consumer's template.\n   */\n  ngOnInit() {\n    // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n    this.target = this.target || this.swalTargets.content;\n    //=> Apply the options provided by the target definition\n    void this.swalComponent.update(this.target.options);\n    //=> Subscribe to a few hooks frm the parent SwalComponent.\n    this.swalComponent.didRender.pipe(takeUntil(this.destroyed)).subscribe(this.didRenderHook.bind(this));\n    this.swalComponent.willOpen.pipe(takeUntil(this.destroyed)).subscribe(this.willOpenHook.bind(this));\n    this.swalComponent.didDestroy.pipe(takeUntil(this.destroyed)).subscribe(this.didDestroyHook.bind(this));\n  }\n  /**\n   * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n   * parent SwalComponent events.\n   */\n  ngOnDestroy() {\n    this.destroyed.next();\n  }\n  /**\n   * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n   * {@link willOpenHook}), or after Swal.update() is called.\n   * This is a good place to render, or re-render, our portal contents.\n   */\n  didRenderHook() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      //=> Ensure the portal component is created\n      if (!_this4.portalComponentRef) {\n        _this4.portalComponentRef = _this4.createPortalComponent();\n      }\n      //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n      // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n      // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n      // the portal component is fully synchronous, causing no blinks in the modal contents.\n      const swal = yield _this4.sweetAlert2Loader.swal;\n      //=> Find target element\n      const targetEl = _this4.target.element(swal);\n      if (!targetEl) return;\n      //=> Replace target's contents with our component\n      // https://jsperf.com/innerhtml-vs-removechild/15\n      while (targetEl.firstChild) {\n        targetEl.removeChild(targetEl.firstChild);\n      }\n      targetEl.appendChild(_this4.portalComponentRef.location.nativeElement);\n    })();\n  }\n  /**\n   * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n   * This is a good place to declare our detached view to the Angular app.\n   */\n  willOpenHook() {\n    if (!this.portalComponentRef) return;\n    //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n    this.app.attachView(this.portalComponentRef.hostView);\n  }\n  /**\n   * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.\n   * This is a good place to detach and destroy our content, that is not visible anymore.\n   */\n  didDestroyHook() {\n    if (!this.portalComponentRef) return;\n    //=> Detach the portal component from the app and destroy it\n    this.app.detachView(this.portalComponentRef.hostView);\n    this.portalComponentRef.destroy();\n    this.portalComponentRef = void 0;\n  }\n  /**\n   * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n   */\n  createPortalComponent() {\n    //=> Create the SwalPortalComponent that will hold our content\n    const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n    // Yes, we do not use the third argument that would directly use the target as the component's view\n    // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n    // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n    // able to restore it at any moment, ie. after the modal has been re-rendered.\n    const componentRef = factory.create(this.injector, []);\n    //=> Apply the consumer's template on the component\n    componentRef.instance.template = this.templateRef;\n    return componentRef;\n  }\n}\nSwalPortalDirective.ɵfac = function SwalPortalDirective_Factory(t) {\n  return new (t || SwalPortalDirective)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(SweetAlert2LoaderService), i0.ɵɵdirectiveInject(SwalPortalTargets), i0.ɵɵdirectiveInject(SwalComponent, 1));\n};\nSwalPortalDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: SwalPortalDirective,\n  selectors: [[\"\", \"swalPortal\", \"\"]],\n  inputs: {\n    target: [\"swalPortal\", \"target\"]\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalPortalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swalPortal]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.ApplicationRef\n    }, {\n      type: i0.TemplateRef\n    }, {\n      type: SweetAlert2LoaderService\n    }, {\n      type: SwalPortalTargets\n    }, {\n      type: SwalComponent,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    target: [{\n      type: Input,\n      args: ['swalPortal']\n    }]\n  });\n})();\nfunction provideDefaultSwal() {\n  return import('sweetalert2');\n}\nclass SweetAlert2Module {\n  static forRoot(options = {}) {\n    return {\n      ngModule: SweetAlert2Module,\n      providers: [SweetAlert2LoaderService, {\n        provide: swalProviderToken,\n        useValue: options.provideSwal || provideDefaultSwal\n      }, {\n        provide: fireOnInitToken,\n        useValue: options.fireOnInit || false\n      }, {\n        provide: dismissOnDestroyToken,\n        useValue: options.dismissOnDestroy || true\n      }]\n    };\n  }\n  static forChild(options = {}) {\n    return {\n      ngModule: SweetAlert2Module,\n      providers: [...(options.provideSwal ? [SweetAlert2LoaderService, {\n        provide: swalProviderToken,\n        useValue: options.provideSwal\n      }] : []), ...(options.fireOnInit !== undefined ? [{\n        provide: fireOnInitToken,\n        useValue: options.fireOnInit\n      }] : []), ...(options.dismissOnDestroy !== undefined ? [{\n        provide: dismissOnDestroyToken,\n        useValue: options.dismissOnDestroy\n      }] : [])]\n    };\n  }\n}\nSweetAlert2Module.ɵfac = function SweetAlert2Module_Factory(t) {\n  return new (t || SweetAlert2Module)();\n};\nSweetAlert2Module.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SweetAlert2Module\n});\nSweetAlert2Module.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SweetAlert2Module, [{\n    type: NgModule,\n    args: [{\n      declarations: [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent],\n      imports: [CommonModule],\n      exports: [SwalComponent, SwalPortalDirective, SwalDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SwalComponent, SwalDirective, SwalPortalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module };","map":{"version":3,"names":["i0","InjectionToken","Injectable","Inject","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","Directive","HostListener","Host","NgModule","Subject","takeUntil","i1","CommonModule","SwalPortalComponent_ng_container_0_Template","rf","ctx","ɵɵelementContainer","swalProviderToken","fireOnInitToken","dismissOnDestroyToken","SweetAlert2LoaderService","constructor","swalProvider","swal","swalPromiseCache","preloadSweetAlertLibrary","libPromise","isLoader","Promise","resolve","then","value","isDefaultExport","default","version","undefined","ɵfac","SweetAlert2LoaderService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","decorators","args","SwalComponent","sweetAlert2Loader","moduleLevelFireOnInit","moduleLevelDismissOnDestroy","willOpen","didOpen","didRender","willClose","didClose","didDestroy","confirm","deny","dismiss","touchedProps","Set","markTouched","add","bind","isCurrentlyShown","swalOptions","options","Object","assign","touchedKeys","keys","forEach","reduce","obj","key","swalVisible","visible","fire","close","ngOnInit","ngAfterViewInit","fireOnInit","swalFireOnInit","ngOnChanges","changes","filter","startsWith","update","ngOnDestroy","dismissOnDestroy","swalDismissOnDestroy","_this","_asyncToGenerator","userOptions","composeHook","modalElement","emit","result","isConfirmed","isDenied","isDismissed","userHook","libHook","_this2","_this3","allOptions","updatableOptions","isUpdatableParameter","SwalComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","inputs","title","titleText","text","html","footer","icon","iconColor","iconHtml","backdrop","toast","target","input","width","padding","background","position","grow","showClass","hideClass","customClass","timer","timerProgressBar","heightAuto","allowOutsideClick","allowEscapeKey","allowEnterKey","stopKeydownPropagation","keydownListenerCapture","showConfirmButton","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","cancelButtonText","confirmButtonColor","denyButtonColor","cancelButtonColor","confirmButtonAriaLabel","denyButtonAriaLabel","cancelButtonAriaLabel","buttonsStyling","reverseButtons","focusConfirm","focusDeny","focusCancel","showCloseButton","closeButtonHtml","closeButtonAriaLabel","loaderHtml","showLoaderOnConfirm","preConfirm","preDeny","imageUrl","imageWidth","imageHeight","imageAlt","inputLabel","inputPlaceholder","inputValue","inputOptions","inputAutoTrim","inputAttributes","inputValidator","returnInputValueOnDeny","validationMessage","progressSteps","currentProgressStep","progressStepsDistance","scrollbarPadding","outputs","features","ɵɵNgOnChangesFeature","decls","vars","template","SwalComponent_Template","encapsulation","changeDetection","selector","OnPush","SwalDirective","viewContainerRef","resolver","swalInstance","isArrayOptions","Array","isArray","resolveComponentFactory","swalRef","createComponent","instance","destroy","onClick","event","preventDefault","stopImmediatePropagation","stopPropagation","swalClosed","asObservable","pipe","subscribe","v","next","SwalDirective_Factory","ViewContainerRef","ComponentFactoryResolver","ɵdir","ɵɵdefineDirective","hostBindings","SwalDirective_HostBindings","ɵɵlistener","SwalDirective_click_HostBindingHandler","$event","SwalPortalComponent","SwalPortalComponent_Factory","consts","SwalPortalComponent_Template","ɵɵtemplate","ɵɵproperty","dependencies","NgTemplateOutlet","SwalPortalTargets","closeButton","element","getCloseButton","getTitle","content","getHtmlContainer","actions","getActions","confirmButton","getConfirmButton","denyButton","getDenyButton","cancelButton","getCancelButton","getFooter","SwalPortalTargets_Factory","providedIn","SwalPortalDirective","injector","app","templateRef","swalTargets","swalComponent","destroyed","didRenderHook","willOpenHook","didDestroyHook","_this4","portalComponentRef","createPortalComponent","targetEl","firstChild","removeChild","appendChild","location","nativeElement","attachView","hostView","detachView","componentRef","create","SwalPortalDirective_Factory","Injector","ApplicationRef","TemplateRef","provideDefaultSwal","SweetAlert2Module","forRoot","ngModule","providers","provide","useValue","provideSwal","forChild","SweetAlert2Module_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["D:/2DS/Peddro/frontend/node_modules/@sweetalert2/ngx-sweetalert2/fesm2020/sweetalert2-ngx-sweetalert2.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, HostListener, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nconst swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');\nconst fireOnInitToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');\nconst dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n\nclass SweetAlert2LoaderService {\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    constructor(swalProvider) {\n        this.swalProvider = swalProvider;\n    }\n    get swal() {\n        if (!this.swalPromiseCache) {\n            this.preloadSweetAlertLibrary();\n        }\n        return this.swalPromiseCache;\n    }\n    preloadSweetAlertLibrary() {\n        if (this.swalPromiseCache)\n            return;\n        const libPromise = isLoader(this.swalProvider)\n            ? this.swalProvider()\n            : Promise.resolve(this.swalProvider);\n        this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n        function isLoader(value) {\n            return typeof value === 'function' && value.version === undefined;\n        }\n        function isDefaultExport(value) {\n            return typeof value === 'function';\n        }\n    }\n}\nSweetAlert2LoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SweetAlert2LoaderService, deps: [{ token: swalProviderToken }], target: i0.ɵɵFactoryTarget.Injectable });\nSweetAlert2LoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SweetAlert2LoaderService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SweetAlert2LoaderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [swalProviderToken]\n                }] }]; } });\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`\n *     and `didDestroy`.\n *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,\n *     there can't be multiple listeners on them, and we need the values they can/must return.\n */\nclass SwalComponent {\n    constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {\n        this.sweetAlert2Loader = sweetAlert2Loader;\n        this.moduleLevelFireOnInit = moduleLevelFireOnInit;\n        this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n        /**\n         * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n         */\n        this.willOpen = new EventEmitter();\n        /**\n         * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n         */\n        this.didOpen = new EventEmitter();\n        /**\n         * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is\n         * repainted on the screen).\n         * Typically, this will happen after `Swal.fire()` or `Swal.update()`.\n         * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over\n         * {@link willOpen}.\n         */\n        this.didRender = new EventEmitter();\n        /**\n         * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup\n         * being fired).\n         */\n        this.willClose = new EventEmitter();\n        /**\n         * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to\n         * another popup being fired).\n         */\n        this.didClose = new EventEmitter();\n        /**\n         * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another\n         * popup.\n         * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer\n         * {@link didDestroy} over {@link didClose}.\n         */\n        this.didDestroy = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Confirm\".\n         * The event value ($event) can be either:\n         *  - by default, just `true`,\n         *  - when using {@link input}, the input value,\n         *  - when using {@link preConfirm}, the return value of this function.\n         *\n         * Example:\n         *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n         *\n         *     public handleConfirm(email: string): void {\n         *         // ... save user email\n         *     }\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Deny\".\n         * This event bears no value.\n         * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n         * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n         *\n         * Example:\n         *     <swal (deny)=\"handleDeny()\"></swal>\n         *\n         *     public handleDeny(): void {\n         *     }\n         */\n        this.deny = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n         * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n         * the modal was programmatically closed (through {@link close} for example).\n         *\n         * Example:\n         *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n         *\n         *     public handleDismiss(reason: DismissReason | undefined): void {\n         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n         *         // ... do something\n         *     }\n         */\n        this.dismiss = new EventEmitter();\n        /**\n         * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n         * what options we have to send to {@link Swal.fire}.\n         */\n        this.touchedProps = new Set();\n        /**\n         * A function of signature `(propName: string): void` that adds a given property name to the list of\n         * touched properties, ie. {@link touchedProps}.\n         */\n        this.markTouched = this.touchedProps.add.bind(this.touchedProps);\n        /**\n         * Is the SweetAlert2 modal represented by this component currently opened?\n         */\n        this.isCurrentlyShown = false;\n    }\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    set swalOptions(options) {\n        //=> Update properties\n        Object.assign(this, options);\n        //=> Mark changed properties as touched\n        const touchedKeys = Object.keys(options);\n        touchedKeys.forEach(this.markTouched);\n    }\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    get swalOptions() {\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n        //   avoiding side effects.\n        return [...this.touchedProps].reduce((obj, key) => ({ ...obj, [key]: this[key] }), {});\n    }\n    set swalVisible(visible) {\n        visible ? this.fire() : this.close();\n    }\n    get swalVisible() {\n        return this.isCurrentlyShown;\n    }\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    ngOnInit() {\n        //=> Preload SweetAlert2 library in case this component is activated.\n        this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n    ngAfterViewInit() {\n        const fireOnInit = this.swalFireOnInit === undefined\n            ? this.moduleLevelFireOnInit\n            : this.swalFireOnInit;\n        fireOnInit && this.fire();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n    ngOnChanges(changes) {\n        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n        //   send it with the next fire() or update() calls.\n        Object.keys(changes)\n            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n            .filter((key) => !key.startsWith('swal'))\n            .forEach(this.markTouched);\n        //=> Eventually trigger re-render if the modal is open.\n        void this.update();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n    ngOnDestroy() {\n        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n        const dismissOnDestroy = this.swalDismissOnDestroy === undefined\n            ? this.moduleLevelDismissOnDestroy\n            : this.swalDismissOnDestroy;\n        dismissOnDestroy && this.close();\n    }\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (dismiss)=\"myHandler($event)\" can be used in templates.\n     */\n    async fire() {\n        const swal = await this.sweetAlert2Loader.swal;\n        const userOptions = this.swalOptions;\n        //=> Build the SweetAlert2 options\n        const options = {\n            //=> Merge with calculated options set for that specific swal\n            ...userOptions,\n            //=> Handle modal lifecycle events\n            willOpen: composeHook(userOptions.willOpen, (modalElement) => {\n                this.willOpen.emit({ modalElement });\n            }),\n            didOpen: composeHook(userOptions.didOpen, (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.didOpen.emit({ modalElement });\n            }),\n            didRender: composeHook(userOptions.didRender, (modalElement) => {\n                this.didRender.emit({ modalElement });\n            }),\n            willClose: composeHook(userOptions.willClose, (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.willClose.emit({ modalElement });\n            }),\n            didClose: composeHook(userOptions.didClose, () => {\n                this.didClose.emit();\n            }),\n            didDestroy: composeHook(userOptions.didDestroy, () => {\n                this.didDestroy.emit();\n            })\n        };\n        //=> Show the Swal! And wait for confirmation or dimissal.\n        const result = await swal.fire(options);\n        //=> Emit on (confirm), (deny) or (dismiss)\n        switch (true) {\n            case result.isConfirmed:\n                this.confirm.emit(result.value);\n                break;\n            case result.isDenied:\n                this.deny.emit();\n                break;\n            case result.isDismissed:\n                this.dismiss.emit(result.dismiss);\n                break;\n        }\n        return result;\n        function composeHook(userHook, libHook) {\n            return (...args) => (libHook(...args), userHook?.(...args));\n        }\n    }\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).\n     *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.\n     *               {@see Swal.close}.\n     */\n    async close(result) {\n        if (!this.isCurrentlyShown)\n            return;\n        const swal = await this.sweetAlert2Loader.swal;\n        swal.close(result);\n    }\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n    async update(options) {\n        if (options) {\n            this.swalOptions = options;\n        }\n        if (!this.isCurrentlyShown)\n            return;\n        const swal = await this.sweetAlert2Loader.swal;\n        const allOptions = this.swalOptions;\n        const updatableOptions = Object.keys(allOptions)\n            .filter(swal.isUpdatableParameter)\n            .reduce((obj, key) => ({ ...obj, [key]: allOptions[key] }), {});\n        swal.update(updatableOptions);\n    }\n}\nSwalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalComponent, deps: [{ token: SweetAlert2LoaderService }, { token: fireOnInitToken }, { token: dismissOnDestroyToken }], target: i0.ɵɵFactoryTarget.Component });\nSwalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.3\", type: SwalComponent, selector: \"swal\", inputs: { title: \"title\", titleText: \"titleText\", text: \"text\", html: \"html\", footer: \"footer\", icon: \"icon\", iconColor: \"iconColor\", iconHtml: \"iconHtml\", backdrop: \"backdrop\", toast: \"toast\", target: \"target\", input: \"input\", width: \"width\", padding: \"padding\", background: \"background\", position: \"position\", grow: \"grow\", showClass: \"showClass\", hideClass: \"hideClass\", customClass: \"customClass\", timer: \"timer\", timerProgressBar: \"timerProgressBar\", heightAuto: \"heightAuto\", allowOutsideClick: \"allowOutsideClick\", allowEscapeKey: \"allowEscapeKey\", allowEnterKey: \"allowEnterKey\", stopKeydownPropagation: \"stopKeydownPropagation\", keydownListenerCapture: \"keydownListenerCapture\", showConfirmButton: \"showConfirmButton\", showDenyButton: \"showDenyButton\", showCancelButton: \"showCancelButton\", confirmButtonText: \"confirmButtonText\", denyButtonText: \"denyButtonText\", cancelButtonText: \"cancelButtonText\", confirmButtonColor: \"confirmButtonColor\", denyButtonColor: \"denyButtonColor\", cancelButtonColor: \"cancelButtonColor\", confirmButtonAriaLabel: \"confirmButtonAriaLabel\", denyButtonAriaLabel: \"denyButtonAriaLabel\", cancelButtonAriaLabel: \"cancelButtonAriaLabel\", buttonsStyling: \"buttonsStyling\", reverseButtons: \"reverseButtons\", focusConfirm: \"focusConfirm\", focusDeny: \"focusDeny\", focusCancel: \"focusCancel\", showCloseButton: \"showCloseButton\", closeButtonHtml: \"closeButtonHtml\", closeButtonAriaLabel: \"closeButtonAriaLabel\", loaderHtml: \"loaderHtml\", showLoaderOnConfirm: \"showLoaderOnConfirm\", preConfirm: \"preConfirm\", preDeny: \"preDeny\", imageUrl: \"imageUrl\", imageWidth: \"imageWidth\", imageHeight: \"imageHeight\", imageAlt: \"imageAlt\", inputLabel: \"inputLabel\", inputPlaceholder: \"inputPlaceholder\", inputValue: \"inputValue\", inputOptions: \"inputOptions\", inputAutoTrim: \"inputAutoTrim\", inputAttributes: \"inputAttributes\", inputValidator: \"inputValidator\", returnInputValueOnDeny: \"returnInputValueOnDeny\", validationMessage: \"validationMessage\", progressSteps: \"progressSteps\", currentProgressStep: \"currentProgressStep\", progressStepsDistance: \"progressStepsDistance\", scrollbarPadding: \"scrollbarPadding\", swalOptions: \"swalOptions\", swalFireOnInit: \"swalFireOnInit\", swalDismissOnDestroy: \"swalDismissOnDestroy\", swalVisible: \"swalVisible\" }, outputs: { willOpen: \"willOpen\", didOpen: \"didOpen\", didRender: \"didRender\", willClose: \"willClose\", didClose: \"didClose\", didDestroy: \"didDestroy\", confirm: \"confirm\", deny: \"deny\", dismiss: \"dismiss\" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'swal',\n                    template: '',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: SweetAlert2LoaderService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [fireOnInitToken]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [dismissOnDestroyToken]\n                }] }]; }, propDecorators: { title: [{\n                type: Input\n            }], titleText: [{\n                type: Input\n            }], text: [{\n                type: Input\n            }], html: [{\n                type: Input\n            }], footer: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], iconColor: [{\n                type: Input\n            }], iconHtml: [{\n                type: Input\n            }], backdrop: [{\n                type: Input\n            }], toast: [{\n                type: Input\n            }], target: [{\n                type: Input\n            }], input: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], padding: [{\n                type: Input\n            }], background: [{\n                type: Input\n            }], position: [{\n                type: Input\n            }], grow: [{\n                type: Input\n            }], showClass: [{\n                type: Input\n            }], hideClass: [{\n                type: Input\n            }], customClass: [{\n                type: Input\n            }], timer: [{\n                type: Input\n            }], timerProgressBar: [{\n                type: Input\n            }], heightAuto: [{\n                type: Input\n            }], allowOutsideClick: [{\n                type: Input\n            }], allowEscapeKey: [{\n                type: Input\n            }], allowEnterKey: [{\n                type: Input\n            }], stopKeydownPropagation: [{\n                type: Input\n            }], keydownListenerCapture: [{\n                type: Input\n            }], showConfirmButton: [{\n                type: Input\n            }], showDenyButton: [{\n                type: Input\n            }], showCancelButton: [{\n                type: Input\n            }], confirmButtonText: [{\n                type: Input\n            }], denyButtonText: [{\n                type: Input\n            }], cancelButtonText: [{\n                type: Input\n            }], confirmButtonColor: [{\n                type: Input\n            }], denyButtonColor: [{\n                type: Input\n            }], cancelButtonColor: [{\n                type: Input\n            }], confirmButtonAriaLabel: [{\n                type: Input\n            }], denyButtonAriaLabel: [{\n                type: Input\n            }], cancelButtonAriaLabel: [{\n                type: Input\n            }], buttonsStyling: [{\n                type: Input\n            }], reverseButtons: [{\n                type: Input\n            }], focusConfirm: [{\n                type: Input\n            }], focusDeny: [{\n                type: Input\n            }], focusCancel: [{\n                type: Input\n            }], showCloseButton: [{\n                type: Input\n            }], closeButtonHtml: [{\n                type: Input\n            }], closeButtonAriaLabel: [{\n                type: Input\n            }], loaderHtml: [{\n                type: Input\n            }], showLoaderOnConfirm: [{\n                type: Input\n            }], preConfirm: [{\n                type: Input\n            }], preDeny: [{\n                type: Input\n            }], imageUrl: [{\n                type: Input\n            }], imageWidth: [{\n                type: Input\n            }], imageHeight: [{\n                type: Input\n            }], imageAlt: [{\n                type: Input\n            }], inputLabel: [{\n                type: Input\n            }], inputPlaceholder: [{\n                type: Input\n            }], inputValue: [{\n                type: Input\n            }], inputOptions: [{\n                type: Input\n            }], inputAutoTrim: [{\n                type: Input\n            }], inputAttributes: [{\n                type: Input\n            }], inputValidator: [{\n                type: Input\n            }], returnInputValueOnDeny: [{\n                type: Input\n            }], validationMessage: [{\n                type: Input\n            }], progressSteps: [{\n                type: Input\n            }], currentProgressStep: [{\n                type: Input\n            }], progressStepsDistance: [{\n                type: Input\n            }], scrollbarPadding: [{\n                type: Input\n            }], swalOptions: [{\n                type: Input\n            }], swalFireOnInit: [{\n                type: Input\n            }], swalDismissOnDestroy: [{\n                type: Input\n            }], swalVisible: [{\n                type: Input\n            }], willOpen: [{\n                type: Output\n            }], didOpen: [{\n                type: Output\n            }], didRender: [{\n                type: Output\n            }], willClose: [{\n                type: Output\n            }], didClose: [{\n                type: Output\n            }], didDestroy: [{\n                type: Output\n            }], confirm: [{\n                type: Output\n            }], deny: [{\n                type: Output\n            }], dismiss: [{\n                type: Output\n            }] } });\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\nclass SwalDirective {\n    constructor(viewContainerRef, resolver) {\n        this.viewContainerRef = viewContainerRef;\n        this.resolver = resolver;\n        /**\n         * Emits when the user clicks \"Confirm\".\n         * The event value ($event) can be either:\n         *  - by default, just `true`,\n         *  - when using {@link input}, the input value,\n         *  - when using {@link preConfirm}, the return value of this function.\n         *\n         * Example:\n         *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n         *\n         *     public handleConfirm(email: string): void {\n         *         // ... save user email\n         *     }\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Deny\".\n         * This event bears no value.\n         * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n         * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n         *\n         * Example:\n         *     <swal (deny)=\"handleDeny()\"></swal>\n         *\n         *     public handleDeny(): void {\n         *     }\n         */\n        this.deny = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n         * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n         * the modal was programmatically closed (through {@link dismiss} for example).\n         *\n         * Example:\n         *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n         *\n         *     public handleDismiss(reason: DismissReason | undefined): void {\n         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n         *         // ... do something\n         *     }\n         */\n        this.dismiss = new EventEmitter();\n    }\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    set swal(options) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        }\n        else if (isArrayOptions(options)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n        }\n        else {\n            this.swalOptions = options;\n        }\n        function isArrayOptions(value) {\n            return Array.isArray(options);\n        }\n    }\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),\n     * (deny) and (dismiss) outputs to reemit on the directive.\n     */\n    ngOnInit() {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n    ngOnDestroy() {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    onClick(event) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n        if (!this.swalInstance)\n            return;\n        if (this.swalOptions) {\n            this.swalInstance.swalOptions = this.swalOptions;\n        }\n        const swalClosed = new Subject();\n        this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n        this.swalInstance.deny.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.deny.emit(v));\n        this.swalInstance.dismiss.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.dismiss.emit(v));\n        this.swalInstance.fire().then(() => swalClosed.next());\n    }\n}\nSwalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Directive });\nSwalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.3\", type: SwalDirective, selector: \"[swal]\", inputs: { swal: \"swal\" }, outputs: { confirm: \"confirm\", deny: \"deny\", dismiss: \"dismiss\" }, host: { listeners: { \"click\": \"onClick($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[swal]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { swal: [{\n                type: Input\n            }], confirm: [{\n                type: Output\n            }], deny: [{\n                type: Output\n            }], dismiss: [{\n                type: Output\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\nclass SwalPortalComponent {\n    constructor() {\n        this.template = null;\n    }\n}\nSwalPortalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalPortalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSwalPortalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.3\", type: SwalPortalComponent, selector: \"swal-portal\", inputs: { template: \"template\" }, ngImport: i0, template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>', isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalPortalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'swal-portal',\n                    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { template: [{\n                type: Input\n            }] } });\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nclass SwalPortalTargets {\n    constructor() {\n        /**\n         * Targets the modal close button block contents.\n         */\n        this.closeButton = {\n            element: swal => swal.getCloseButton(),\n            options: { showCloseButton: true }\n        };\n        /**\n         * Targets the modal title block contents.\n         */\n        this.title = {\n            element: swal => swal.getTitle(),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { title: ' ' }\n        };\n        /**\n         * Targets the modal text block contents (that is another block inside the first content block, so you can still\n         * use other modal features like Swal inputs, that are situated inside that parent content block).\n         */\n        this.content = {\n            element: swal => swal.getHtmlContainer(),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { text: ' ' }\n        };\n        /**\n         * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n         * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n         *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n         *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n         *     performance of everyone, for a relatively rare use case.\n         */\n        this.actions = {\n            element: swal => swal.getActions(),\n            // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n            options: { showConfirmButton: true }\n        };\n        /**\n         * Targets the confirm button contents, replacing the text inside it (not the button itself)\n         */\n        this.confirmButton = {\n            element: swal => swal.getConfirmButton(),\n            options: { showConfirmButton: true }\n        };\n        /**\n         * Targets the deny button contents, replacing the text inside it (not the button itself)\n         */\n        this.denyButton = {\n            element: swal => swal.getDenyButton(),\n            options: { showDenyButton: true }\n        };\n        /**\n         * Targets the cancel button contents, replacing the text inside it (not the button itself)\n         */\n        this.cancelButton = {\n            element: swal => swal.getCancelButton(),\n            options: { showCancelButton: true }\n        };\n        /**\n         * Targets the modal footer contents.\n         */\n        this.footer = {\n            element: swal => swal.getFooter(),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { footer: ' ' }\n        };\n    }\n}\nSwalPortalTargets.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalPortalTargets, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nSwalPortalTargets.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalPortalTargets, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalPortalTargets, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\nclass SwalPortalDirective {\n    constructor(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.app = app;\n        this.templateRef = templateRef;\n        this.sweetAlert2Loader = sweetAlert2Loader;\n        this.swalTargets = swalTargets;\n        this.swalComponent = swalComponent;\n        this.destroyed = new Subject();\n    }\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     */\n    ngOnInit() {\n        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n        this.target = this.target || this.swalTargets.content;\n        //=> Apply the options provided by the target definition\n        void this.swalComponent.update(this.target.options);\n        //=> Subscribe to a few hooks frm the parent SwalComponent.\n        this.swalComponent.didRender.pipe(takeUntil(this.destroyed)).subscribe(this.didRenderHook.bind(this));\n        this.swalComponent.willOpen.pipe(takeUntil(this.destroyed)).subscribe(this.willOpenHook.bind(this));\n        this.swalComponent.didDestroy.pipe(takeUntil(this.destroyed)).subscribe(this.didDestroyHook.bind(this));\n    }\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n    ngOnDestroy() {\n        this.destroyed.next();\n    }\n    /**\n     * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link willOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n    async didRenderHook() {\n        //=> Ensure the portal component is created\n        if (!this.portalComponentRef) {\n            this.portalComponentRef = this.createPortalComponent();\n        }\n        //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n        // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n        // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n        // the portal component is fully synchronous, causing no blinks in the modal contents.\n        const swal = await this.sweetAlert2Loader.swal;\n        //=> Find target element\n        const targetEl = this.target.element(swal);\n        if (!targetEl)\n            return;\n        //=> Replace target's contents with our component\n        // https://jsperf.com/innerhtml-vs-removechild/15\n        while (targetEl.firstChild) {\n            targetEl.removeChild(targetEl.firstChild);\n        }\n        targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n    }\n    /**\n     * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n    willOpenHook() {\n        if (!this.portalComponentRef)\n            return;\n        //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n        this.app.attachView(this.portalComponentRef.hostView);\n    }\n    /**\n     * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n    didDestroyHook() {\n        if (!this.portalComponentRef)\n            return;\n        //=> Detach the portal component from the app and destroy it\n        this.app.detachView(this.portalComponentRef.hostView);\n        this.portalComponentRef.destroy();\n        this.portalComponentRef = void 0;\n    }\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n    createPortalComponent() {\n        //=> Create the SwalPortalComponent that will hold our content\n        const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n        // Yes, we do not use the third argument that would directly use the target as the component's view\n        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n        // able to restore it at any moment, ie. after the modal has been re-rendered.\n        const componentRef = factory.create(this.injector, []);\n        //=> Apply the consumer's template on the component\n        componentRef.instance.template = this.templateRef;\n        return componentRef;\n    }\n}\nSwalPortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalPortalDirective, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }, { token: i0.TemplateRef }, { token: SweetAlert2LoaderService }, { token: SwalPortalTargets }, { token: SwalComponent, host: true }], target: i0.ɵɵFactoryTarget.Directive });\nSwalPortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.3\", type: SwalPortalDirective, selector: \"[swalPortal]\", inputs: { target: [\"swalPortal\", \"target\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SwalPortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[swalPortal]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }, { type: i0.TemplateRef }, { type: SweetAlert2LoaderService }, { type: SwalPortalTargets }, { type: SwalComponent, decorators: [{\n                    type: Host\n                }] }]; }, propDecorators: { target: [{\n                type: Input,\n                args: ['swalPortal']\n            }] } });\n\nfunction provideDefaultSwal() {\n    return import('sweetalert2');\n}\nclass SweetAlert2Module {\n    static forRoot(options = {}) {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                SweetAlert2LoaderService,\n                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },\n                { provide: fireOnInitToken, useValue: options.fireOnInit || false },\n                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }\n            ]\n        };\n    }\n    static forChild(options = {}) {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                ...options.provideSwal ? [\n                    SweetAlert2LoaderService,\n                    { provide: swalProviderToken, useValue: options.provideSwal }\n                ] : [],\n                ...options.fireOnInit !== undefined ? [\n                    { provide: fireOnInitToken, useValue: options.fireOnInit }\n                ] : [],\n                ...options.dismissOnDestroy !== undefined ? [\n                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }\n                ] : []\n            ]\n        };\n    }\n}\nSweetAlert2Module.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SweetAlert2Module, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSweetAlert2Module.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.3\", ngImport: i0, type: SweetAlert2Module, declarations: [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent], imports: [CommonModule], exports: [SwalComponent, SwalPortalDirective, SwalDirective] });\nSweetAlert2Module.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SweetAlert2Module, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SweetAlert2Module, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent\n                    ],\n                    imports: [\n                        CommonModule\n                    ],\n                    exports: [\n                        SwalComponent, SwalPortalDirective, SwalDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SwalComponent, SwalDirective, SwalPortalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}